#include "music.h";

int photocellPin1 = A0;
int photocell1; //on A0
int photocellPin2 = A2;
int photocell2;
int touchSensorPin1 = 9;
int touchSensor1; //on 9 (digital)
int touchSensorPin2 = 8;
int touchSensor2; //on 9 (digital)
int LEDPin1 = 11;
int LEDPin2 = 6; //music pin???
int LEDPin3 = 5;
int LEDPin4 = 12;
int buzzerPin = 10;

void setup() {
  Serial.begin(9600);

  pinMode(photocellPin1, INPUT); //photocell
  pinMode(photocellPin2, INPUT); //photocell
  pinMode(touchSensorPin1, INPUT); //touchSensor
  pinMode(touchSensorPin2, INPUT); //touchSensor
  pinMode(LEDPin1, OUTPUT); //LEDs
  pinMode(LEDPin2, OUTPUT); //LEDs
  pinMode(LEDPin4, OUTPUT); //LEDs
  pinMode(LEDPin4, OUTPUT); //LEDs
  pinMode(buzzerPin, OUTPUT); //buzzer
  
//  attachInterrupt(digitalPinToInterrupt(touchSensorPin1),pause,FALLING);
}

void loop() {
  //read inputs
  photocell1 = analogRead(photocellPin1); //range: 14-660
  photocell2 = analogRead(photocellPin2); //range: 14-660
  touchSensor1 = digitalRead(touchSensorPin1);
  touchSensor2 = digitalRead(touchSensorPin2);

  //LED output
  int LEDbrightness1 = map(photocell1, 500, 15, 0, 255);
  int LEDbrightness2 = map(photocell2, 500, 15, 0, 255);

  //turn LED off if bright
  if(photocell1 < 500){
    analogWrite(LEDPin1,LEDbrightness1);
    analogWrite(LEDPin2,LEDbrightness1);
  } else{
    digitalWrite(LEDPin1, LOW);
    digitalWrite(LEDPin2, LOW); 
  }

   //turn LED off if bright
  if(photocell2 < 500){
    analogWrite(LEDPin3,LEDbrightness2);
    analogWrite(LEDPin4,LEDbrightness2);
  } else{
    digitalWrite(LEDPin3, LOW);
    digitalWrite(LEDPin4, LOW);   
  }

  //Touch sensor & Buzzer
  if(touchSensor1 == 1){
    Mario();
  }

  //Touch sensor & Buzzer
  if(touchSensor2 == 1){
    Mii();
  }


}//end loop

////interupt function to pause the buzzer when the buzzSensor reading is LOW
//void pause() {
//  Serial.println("INTERRPUT");
//  noTone(buzzerPin);
//}

void Mario() {
   
  // iterate over the notes of the melody. 
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notesA * 2; thisNote = thisNote + 2) {
    // calculates the duration of each note
    divider = melodyA[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenoteA) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenoteA) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzerPin, melodyA[thisNote], noteDuration*0.9);

    // Wait for the specific duration before playing the next note.
    delay(noteDuration);
    
    // stop the waveform generation before the next note.
    noTone(buzzerPin);
     
   }
}

void Mii() {
   
  // iterate over the notes of the melody. 
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notesB * 2; thisNote = thisNote + 2) {
    // calculates the duration of each note
    divider = melodyB[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenoteB) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenoteB) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzerPin, melodyB[thisNote], noteDuration*0.9);

    // Wait for the specific duration before playing the next note.
    delay(noteDuration);
    
    // stop the waveform generation before the next note.
    noTone(buzzerPin);
     
   }
}
